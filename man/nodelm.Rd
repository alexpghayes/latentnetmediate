% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nodelm.R
\name{nodelm}
\alias{nodelm}
\title{Use spectral node embeddings in ordinary least squares regression}
\usage{
nodelm(formula, graph = NULL, data = NULL, attr = NULL, ...)
}
\arguments{
\item{formula}{A regression formula that can include \link{ase_specials}
and \link{vsp_specials}, which encode node embeddings. Data for non-
embedding terms can come from the global environment, \code{data}, or
can be named attributes of an \code{igraph} object. It is likely most
convenient and intuitive to but nodal covariates in the \code{nodes} table
of a \code{\link[tidygraph:tbl_graph]{tidygraph::tbl_graph()}} object to expose nodal data. See \link{reddit},
\link{addhealth} and \link{smoking} for examples.}

\item{graph}{An optional \code{\link[igraph:make_graph]{igraph::graph()}} or \code{\link[tidygraph:tbl_graph]{tidygraph::tbl_graph()}}
object. If specified, the graph adjacency matrix \code{A}, normalized
graph Laplacian \code{L}, and regularized graph Laplacian \code{L_tau} are
injected into the environment of formula, so these matrices may be used
freely in \code{formula}. See \code{\link[igraph:as_adjacency_matrix]{igraph::as_adjacency_matrix()}} for
details about the construction of \code{A}, and
\code{\link[invertiforms:NormalizedLaplacian]{invertiforms::NormalizedLaplacian()}} and
\code{\link[invertiforms:RegularizedLaplacian]{invertiforms::RegularizedLaplacian()}} for details about the construction
of \code{L} and \code{L_tau}. Note that you can also use node embeddings based
on arbitrary matrix representations of a graph--see the examples.}

\item{data}{A \code{\link[=data.frame]{data.frame()}} with one row for each node in the graph.}

\item{attr}{Either \code{NULL} or a character string giving an edge
attribute name. If \code{NULL} a traditional adjacency matrix is returned.
If not \code{NULL} then the values of the given edge attribute are included
in the adjacency matrix. If the graph has multiple edges, the edge attribute
of an arbitrarily chosen edge (for the multiple edges) is included. This
argument is ignored if \code{edges} is \code{TRUE}.

Note that this works only for certain attribute types. If the \code{sparse}
argumen is \code{TRUE}, then the attribute must be either logical or
numeric. If the \code{sparse} argument is \code{FALSE}, then character is
also allowed. The reason for the difference is that the \code{Matrix}
package does not support character sparse matrices yet.}

\item{...}{
  Arguments passed on to \code{\link[estimatr:lm_robust]{estimatr::lm_robust}}
  \describe{
    \item{\code{weights}}{the bare (unquoted) names of the weights variable in the
supplied data.}
    \item{\code{subset}}{An optional bare (unquoted) expression specifying a subset
of observations to be used.}
    \item{\code{clusters}}{An optional bare (unquoted) name of the variable that
corresponds to the clusters in the data.}
    \item{\code{fixed_effects}}{An optional right-sided formula containing the fixed
effects that will be projected out of the data, such as \code{~ blockID}. Do not
pass multiple-fixed effects with intersecting groups. Speed gains are greatest for
variables with large numbers of groups and when using "HC1" or "stata" standard errors.
See 'Details'.}
    \item{\code{se_type}}{The sort of standard error sought. If \code{clusters} is
not specified the options are "HC0", "HC1" (or "stata", the equivalent),
 "HC2" (default), "HC3", or
"classical". If \code{clusters} is specified the options are "CR0", "CR2" (default), or "stata". Can also specify "none", which may speed up estimation of the coefficients.}
    \item{\code{ci}}{logical. Whether to compute and return p-values and confidence
intervals, TRUE by default.}
    \item{\code{alpha}}{The significance level, 0.05 by default.}
    \item{\code{return_vcov}}{logical. Whether to return the variance-covariance
matrix for later usage, TRUE by default.}
    \item{\code{try_cholesky}}{logical. Whether to try using a Cholesky
decomposition to solve least squares instead of a QR decomposition,
FALSE by default. Using a Cholesky decomposition may result in speed gains, but should only
be used if users are sure their model is full-rank (i.e., there is no
perfect multi-collinearity)}
  }}
}
\value{
An object of class \code{lm_robust}. See \code{\link[estimatr:lm_robust]{estimatr::lm_robust()}} for
details.
}
\description{
A helper function that exposes the adjacency matrix \code{A}, normalized
graph Laplacian \code{L}, and regularized graph Laplacian \code{L_tau} to
model formulas for convenient network regression. Primarily designed
to work with \code{\link[tidygraph:tbl_graph]{tidygraph::tbl_graph()}} objects, but can also be used
with a matrix representation of a graph together with a \code{\link[=data.frame]{data.frame()}}
of nodal covariates.
}
\examples{

### some examples where data is specified as a tidygraph

# a regression that does not use any node embeddings
nodelm(grade ~ sex, graph = addhealth[[36]])

# a regression including left and right singular embeddings of
# the adjacency matrix and the normalized graph Laplacian
nodelm(grade ~ sex + U(A, 5) + V(L, 3), graph = addhealth[[36]])

nodelm(as.integer(smokes) ~ sex + U(A, 5) , graph = smoking)

library(Matrix)
library(tidygraph)

B <- igraph::as_adjacency_matrix(addhealth[[36]], attr = "weight")

node <- addhealth[[36]] |>
  as_tibble() |>
  mutate(level = rowSums(B))

node[5, "sex"] <- NA
node

fit <- nodelm(level ~ sex + grade + race + U(sign(B), 10), data = node)
summary(fit)

}
